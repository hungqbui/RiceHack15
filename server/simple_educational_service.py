"""
Simple educational service using Google Gemini API directly for audio processing
"""
import os
import base64
import logging
from typing import Dict, List, Optional
from dotenv import load_dotenv
import google.generativeai as genai

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleEducationalService:
    def __init__(self):
        """Initialize educational service with Google GenAI"""
        self.api_key = os.getenv('GOOGLE_API_KEY')
        
        if not self.api_key:
            logger.warning("Google API key not found. Some features may not work.")
            return
        
        try:
            # Configure Gemini
            genai.configure(api_key=self.api_key)
            
            # Initialize the model
            self.model = genai.GenerativeModel('gemini-2.0-flash-exp')
            
            logger.info("Simple educational service initialized successfully with Google GenAI")
        except Exception as e:
            logger.error(f"Error initializing educational service: {str(e)}")
            self.model = None
    
    def educational_audio_chat(self, audio_data: bytes, mime_type: str) -> Dict:
        """
        Answer educational questions using direct audio input to Gemini
        
        Args:
            audio_data: Raw audio bytes
            mime_type: MIME type of the audio (e.g., 'audio/wav', 'audio/mp3')
            
        Returns:
            Dictionary with answer and source information
        """
        try:
            if not self.model:
                return {
                    'answer': 'Educational AI service is not properly initialized.',
                    'sources': [],
                    'status': 'error'
                }
            
            # Create the educational prompt
            prompt = """You are an educational AI assistant. Please listen to the student's audio question and provide a clear, helpful educational response. 

If you can understand the audio, provide a comprehensive educational response that helps the student learn. If you need clarification, ask for it clearly.

Please respond with educational content that is informative and easy to understand."""
            
            # Create audio part from bytes
            audio_part = {
                "mime_type": mime_type,
                "data": audio_data
            }
            
            # Generate response with audio input
            response = self.model.generate_content([prompt, audio_part])
            
            return {
                'answer': response.text,
                'sources': [{'content': 'Direct audio processing with Gemini AI', 'source': 'Audio Input'}],
                'status': 'success',
                'audio_processed': True
            }
                
        except Exception as e:
            logger.error(f"Error in educational audio chat: {str(e)}")
            return {
                'answer': f'Error processing audio: {str(e)}',
                'sources': [],
                'status': 'error'
            }
    
    def educational_chat(self, question: str) -> Dict:
        """
        Answer educational questions using text
        
        Args:
            question: Student's question
            
        Returns:
            Dictionary with answer and source information
        """
        try:
            if not self.model:
                return {
                    'answer': 'Educational AI service is not properly initialized.',
                    'sources': [],
                    'status': 'error'
                }
            
            # Create the educational prompt
            prompt = f"""You are an educational AI assistant. Please answer the following student question clearly and helpfully:

Question: {question}

Please provide a comprehensive educational response that helps the student learn."""
            
            # Generate response
            response = self.model.generate_content(prompt)
            
            return {
                'answer': response.text,
                'sources': [{'content': 'Generated by Gemini AI', 'source': 'Educational AI'}],
                'status': 'success'
            }
                
        except Exception as e:
            logger.error(f"Error in educational chat: {str(e)}")
            return {
                'answer': f'Error processing question: {str(e)}',
                'sources': [],
                'status': 'error'
            }

# Create global instance
simple_educational_service = SimpleEducationalService()