
    Data Structures and Algorithms
    
    Chapter 1: Time and Space Complexity
    
    Big O Notation:
    Describes the upper bound of algorithm performance as input size grows.
    
    Common Time Complexities:
    - O(1): Constant time - accessing array element
    - O(log n): Logarithmic time - binary search
    - O(n): Linear time - linear search
    - O(n log n): Linearithmic time - merge sort, heap sort
    - O(n²): Quadratic time - bubble sort, selection sort
    - O(2^n): Exponential time - recursive fibonacci
    
    Space Complexity:
    Amount of extra memory used by an algorithm relative to input size.
    
    Chapter 2: Data Structures
    
    Arrays:
    - Fixed size collection of elements
    - Random access: O(1)
    - Insertion/deletion at end: O(1)
    - Search: O(n) for unsorted, O(log n) for sorted
    
    Linked Lists:
    - Dynamic size collection
    - Sequential access only
    - Insertion/deletion at beginning: O(1)
    - Search: O(n)
    
    Stacks:
    - LIFO (Last In, First Out) structure
    - Operations: push, pop, peek
    - All operations: O(1)
    
    Queues:
    - FIFO (First In, First Out) structure  
    - Operations: enqueue, dequeue
    - All operations: O(1)
    
    Binary Trees:
    - Hierarchical structure
    - Each node has at most 2 children
    - Binary Search Tree: left < parent < right
    - Search/insert/delete: O(log n) average, O(n) worst case
    
    Hash Tables:
    - Key-value pair storage
    - Hash function maps keys to indices
    - Average case operations: O(1)
    - Worst case (many collisions): O(n)
    
    Chapter 3: Sorting Algorithms
    
    Bubble Sort:
    - Repeatedly swap adjacent elements if in wrong order
    - Time: O(n²), Space: O(1)
    
    Merge Sort:
    - Divide and conquer approach
    - Time: O(n log n), Space: O(n)
    - Stable sorting algorithm
    
    Quick Sort:
    - Choose pivot, partition around pivot
    - Average time: O(n log n), Worst: O(n²)
    - Space: O(log n)
    
    Heap Sort:
    - Build max heap, repeatedly extract maximum
    - Time: O(n log n), Space: O(1)
    